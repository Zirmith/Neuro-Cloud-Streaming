<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Neuro Cloud Streaming - Create Stream</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 960px;
      margin: 0 auto;
      padding: 20px;
    }

    .row::after {
      content: "";
      clear: both;
      display: table;
    }

    .col-md-6 {
      width: 50%;
      float: left;
    }

    .offset-md-3 {
      margin-left: 25%;
    }

    .card {
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-header {
      background-color: #f5f5f5;
      padding: 10px;
      font-weight: bold;
    }

    .card-body {
      padding: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .form-control {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border-radius: 4px;
      border: 1px solid #ccc;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 4px;
      cursor: pointer;
    }

    .fa {
      margin-right: 5px;
    }
  </style>
</head>

<body>
  <nav>
    <!-- Your navigation bar code here -->
  </nav>

  <div class="container">
    <div class="row">
      <div class="col-md-6 offset-md-3">
        <div class="card">
          <div class="card-header">
            <i class="fas fa-video"></i> Create Stream
          </div>
          <div class="card-body">
            <form action="/api/v1/streams" method="POST">
              <div class="form-group">
                <label for="title"><i class="fas fa-heading"></i> Title</label>
                <input type="text" id="title" name="title" class="form-control" required>
              </div>
              <div class="form-group">
                <label for="description"><i class="fas fa-align-left"></i> Description</label>
                <textarea id="description" name="description" class="form-control" rows="4" required></textarea>
              </div>
              <button type="submit" class="btn btn-primary"><i class="fas fa-video"></i> Create Stream</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/public/js/app.js"></script>
  <script>
    function startStreaming() {
      navigator.mediaDevices.getDisplayMedia()
        .then(stream => {
          const videoElement = document.createElement('video');
          videoElement.srcObject = stream;
          videoElement.autoplay = true;
          videoElement.controls = true;

          const container = document.querySelector('.container');
          container.appendChild(videoElement);

          // Stream the obtained media stream to the server
          const streamId = 'your_stream_id'; // Replace with your stream ID
          const mediaRecorder = new MediaRecorder(stream);

          mediaRecorder.ondataavailable = event => {
            if (event.data.size > 0) {
              const formData = new FormData();
              formData.append('stream', event.data, `${streamId}.webm`);

              fetch(`/api/v1/streams/${streamId}`, {
                  method: 'POST',
                  body: formData
                })
                .then(response => {
                  if (response.ok) {
                    // Stream data sent successfully
                  } else {
                    console.error('Error sending stream data:', response.statusText);
                  }
                })
                .catch(error => {
                  console.error('Error sending stream data:', error);
                });
            }
          };

          mediaRecorder.start(1000); // Adjust the interval based on your needs

          // Stop streaming and cleanup resources
          function stopStreaming() {
            mediaRecorder.stop();
            stream.getTracks().forEach(track => track.stop());
            container.removeChild(videoElement);
          }

          // Add an event listener to the window unload event
          window.addEventListener('beforeunload', stopStreaming);
        })
        .catch(error => {
          console.error('Error accessing screen sharing:', error);
        });
    }
  </script>
</body>

</html>
